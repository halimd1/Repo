package Assignment1;

import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.Scanner;
import java.io.File;
import java.io.FileNotFoundException;

public class PasswordCheckerUtility {
	
	/**
	 * Compares two passwords to see if they match
	 * @author Halim Dogrusoz
	 * @param password - password to compare to passwordConfirm
	 * @param passwordConfirm - password to compare to password
	 * @throws UnmatchedException - is thrown if passwords are not matched
	 */
	public static void comparePasswords(String password, String passwordConfirm) throws UnmatchedException{
		int size1 = password.length();
		int size2 = passwordConfirm.length();
		
		if(size1 != size2)
			throw new UnmatchedException();
			
		for(int i = 0; i < size1; i++){
			if(password.charAt(i) != passwordConfirm.charAt(i))
				throw new UnmatchedException();
		}
	}
	
	/**
	 * Compares two passwords to see if they match
	 * @author Halim Dogrusoz
	 * @param password - password to compare to passwordConfirm
	 * @param passwordConfirm - password to compare to password
	 * @return true if password match, false otherwise
	 */
	public static boolean comparePasswordsWithReturn(String password, String passwordConfirm) {
		int size1 = password.length();
		int size2 = passwordConfirm.length();

		if(size1 != size2)
		   return false;

		for(int i = 0; i < size1; i++){
		    if(password.charAt(i) != passwordConfirm.charAt(i))
		       return false;
		}
		return true;
	}
	
	/**
	 * Reads an Array of passwords and puts the invalid passwords into an array list
	 * @author Halim Dogrusoz
	 * @param passwords - Array list containing passwords
	 * @return invalidPassword - Array list containing invalid passwords
	 */
	public static ArrayList<String> getInvalidPasswords (ArrayList<String> passwords){
		ArrayList<String> invalidPassword = new ArrayList<String>();
		for(int i = 0; i < passwords.size(); i++) {	
				try {
					isValidPassword(passwords.get(i));
				} catch (LengthException | NoUpperAlphaException | NoLowerAlphaException | NoDigitException
						| NoSpecialCharacterException | InvalidSequenceException exception) {
					invalidPassword.add(passwords.get(i) + " -> " + exception.getMessage());
					exception.printStackTrace();
				}
		}
		return invalidPassword;
	}
	
	/**
	 * Checks if the password is between 6 and 9 characters
	 * @author Halim Dogrusoz
	 * @param password - password to be checked
	 * @return true if between 6 and 9 characters, false otherwise
	 */
	public static boolean hasBetweenSixAndNineChars(String password) {
		if(password.length() >= 6 && password.length() <= 9)
			   return true;
		return false;
	}
	
	/**
	 * Checks if the password has at least one digit
	 * @author Halim Dogrusoz
	 * @param password - password to be checked
	 * @return true if there is a digit
	 * @throws NoDigitException - exception thrown if there is no digit
	 */
	public static boolean hasDigit(String password) throws NoDigitException{
		for(int i = 0; i < password.length(); i++){
		    if(Character.isDigit(password.charAt(i)) == true)
		         return true;
		}
		throw new NoDigitException();
	}
	
	/**
	 * Checks if the password has at least one lower case letter
	 * @author Halim Dogrusoz
	 * @param password - password to be checked
	 * @return true if there is one lower case letter
	 * @throws NoLowerAlphaException - exception thrown if there is no lower case letter
	 */
	public static boolean hasLowerAlpha(String password) throws NoLowerAlphaException{
		for(int i = 0; i < password.length(); i++){
			if(Character.isLowerCase(password.charAt(i)))
				return true;
		}
		throw new NoLowerAlphaException();
			
	}
	
	/**
	 * checks if there are any more then two characters in a sequence 
	 * @author Halim Dogrusoz
	 * @param password - password to be checked
	 * @return true if there is a healthy character sequence
	 * @throws InvalidSequenceException - exception thrown if there is an unhealthy character sequence
	 */
	public static boolean hasSameCharInSequence(String password) throws InvalidSequenceException{
		for(int i = 0; i < password.length() - 2; i++) {
			if((password.charAt(i) == password.charAt(i + 1)) && (password.charAt(i) == password.charAt(i + 2)))
				throw new InvalidSequenceException();
		}
		return true;
	}
	
	/**
	 * checks if the password has a special character
	 * @author Halim Dogrusoz
	 * @param password - password to be checked
	 * @return true if there is a special character
	 * @throws NoSpecialCharacterException - exception to be thrown if there are no special characters
	 */
	public static boolean hasSpecialChar(String password) throws NoSpecialCharacterException{
		Pattern pattern = Pattern.compile("[^a-zA-Z0-9]");
		Matcher matcher = pattern.matcher(password);
		
		boolean foundSC = matcher.find();
		if(foundSC) {
			return true;
		}
		else {
			throw new NoSpecialCharacterException();
		}
	}
	
	/**
	 * checks if the password has a upper case letter
	 * @author Halim Dogrusoz
	 * @param password - password to be checked
	 * @return true if there is an upper case letter
	 * @throws NoUpperAlphaException - exception to be thrown if there are no upper case letters
	 */
	public static boolean hasUpperAlpha(String password) throws NoUpperAlphaException{
		for(int i = 0; i < password.length(); i++){
		    if(Character.isUpperCase(password.charAt(i)) == true)
		         return true;
		}
		throw new NoUpperAlphaException();
	}
	
	/**
	 * checks if the password has a valid length
	 * @author Halim Dogrusoz
	 * @param password - password to be checked
	 * @return true if password has a valid length
	 * @throws LengthException - exception to be thrown if the password has a length less than 6
	 */
	public static boolean isValidLength(String password) throws LengthException{
		if(password.length() > 6)
			   return true;
		throw new LengthException();
	}
	
	/**
	 * checks if the password is a valid password
	 * @author Halim Dogrusoz
	 * @param password - password to be checked
	 * @return true if password is valid
	 * @throws LengthException - exception to be thrown if the password has a length less than 6
	 * @throws NoUpperAlphaException - exception to be thrown if there are no upper case letters
	 * @throws NoSpecialCharacterException - exception to be thrown if there are no special characters
	 * @throws InvalidSequenceException - exception thrown if there is an unhealthy character sequence
	 */
	public static boolean isValidPassword(String password) throws LengthException,NoUpperAlphaException,NoLowerAlphaException, NoDigitException, NoSpecialCharacterException, InvalidSequenceException{
		
		if(!isValidLength(password))
			throw new LengthException();
		
		if(!hasUpperAlpha(password))
			throw new NoUpperAlphaException();
		
		if(!hasLowerAlpha(password))
			throw new NoLowerAlphaException();
		
		if(!hasDigit(password))
			throw new NoDigitException();
			
		if(!hasSpecialChar(password))
			throw new NoSpecialCharacterException();
			
		if(!hasSameCharInSequence(password))
			throw new InvalidSequenceException();
		
		return true;
	}
	
	public static boolean isWeakPassword(String password) throws WeakPasswordException{
		if(hasBetweenSixAndNineChars(password))
			throw new WeakPasswordException();
		return false;
	}



}
